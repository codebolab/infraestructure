# Set facts about the cluster:
# * account_id : aws account id
# * vpc_id : AWS VPC id
# * vpc_subnet_ids : key (subnet name) value (subnet id) dictionary
# * vpc_security_group_ids : key (security group name) value (security group id) dictionary
# * ec2_instances : key (instance name) value (instance id) dictionary
# * ec2_ips : key (instance name) value (instance internal ip) dictionary

# Fact: account_id
# ----------------------------
- name: Account information
  aws_caller_info:
  register: caller_info

- set_fact:
    account_id: "{{ caller_info['account'] }}"

- block:
    - debug:
        msg: "Getting facts for VPC: {{ platform_name }}"

    # Fact: vpc_id
    # ----------------------------
    - name: VPC facts
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ platform_name }}"
      register: vpc_facts

    - debug:
        var: vpc_facts

    - name: set fact VPC ID
      set_fact:
        vpc_id: "{{ vpc_facts.vpcs[0].id }}"

    # Fact: vpc_subnet_ids
    # ----------------------------
    - name: VPC subnet facts
      ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_subnet_facts

    - name: "set facts: VPC subnet IDs"
      set_fact:
        vpc_subnet_ids: "{{ vpc_subnet_ids | default({}) | combine({ (item.tags.Name | default('default')): item.id }) }}"
      loop: "{{ vpc_subnet_facts.subnets }}"

    # Fact: vpc_security_group_id
    # ----------------------------
    - name: VPC security group facts
      ec2_group_info:
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_security_group_facts

    - name: "set facts: VPC security group IDs"
      set_fact:
        vpc_security_group_ids: "{{ vpc_security_group_ids | default({}) | combine({ (item.group_name | default('default')): item.group_id }) }}"
      loop: "{{ vpc_security_group_facts.security_groups }}"

    # Fact: ec2_instances
    # ----------------------------
    - ec2_instance_info:
        filters:
            "tag:Environment": "{{ env_name }}"
            instance-state-name: ['running', 'shutting-down', 'stopping']
            "tag:VPC": "{{ platform_name }}"
      register: ec2_facts

    - name: "set facts: ec2_instances"
      set_fact:
        ec2_instances: "{{ ec2_instances | default({}) | combine({ (item.tags.Name | default(item.instance_id)): item.instance_id }) }}"
      loop: "{{ ec2_facts['instances'] }}"

    # Fact: ec2_ips
    # ----------------------------
    - name: "set facts: ec2_ips"
      set_fact:
        ec2_ips: "{{ ec2_ips | default({}) | combine({ (item.tags.Name | default(item.instance_id)): item.private_ip_address }) }}"
      loop: "{{ ec2_facts['instances'] }}"
      when: item.private_ip_address is defined

    # Fact: ec2_public_ips
    # ----------------------------
    - name: "set facts: ec2_public_ips"
      set_fact:
        ec2_public_ips: "{{ ec2_public_ips | default({}) | combine({ (item.tags.Name | default(item.instance_id)): item.public_ip_address }) }}"
      loop: "{{ ec2_facts['instances'] }}"
      when: item.public_ip_address is defined
  rescue:
    - debug:
        msg: "VPC facts failed"

    - set_fact:
        vpc_id: invalid

- name: VPC ID
  debug:
    var: vpc_id
  when: vpc_id != 'invalid'

- name: VPC Subnets
  debug:
    var: vpc_subnet_ids
  when: vpc_id != 'invalid'

- name: Security Groups
  debug:
    var: vpc_security_group_ids
  when: vpc_id != 'invalid'

- name: EC2 IPs
  debug:
    var: ec2_ips
  when: vpc_id != 'invalid'

- name: EC2 Instances
  debug:
    var: ec2_instances
  when: vpc_id != 'invalid'
